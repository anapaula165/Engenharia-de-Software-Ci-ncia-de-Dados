# -*- coding: utf-8 -*-
"""RALAA

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bt4kYyXA9BDGFI-NJ5-HJd8QG3gygjqX

# DATAFRAME
"""

import pandas as pd

# Carregar os dados dos arquivos CSV
usuarios = pd.read_csv('/content/usuarios.csv')
musicas = pd.read_csv('/content/musicas.csv')
generos = pd.read_csv('/content/generos.csv')
historico = pd.read_csv('/content/historico_de_escuta.csv')
feedbacks = pd.read_csv('/content/feedback.csv')
feedback_continuo = pd.read_csv('/content/feedback_continuo.csv')

# Mostrar os DataFrames carregados
print("DataFrame de Usuários:")
print(usuarios)
print("\nDataFrame de Músicas:")
print(musicas)
print("\nDataFrame de Gêneros:")
print(generos)
print("\nDataFrame de Histórico de Escuta:")
print(historico)
print("\nDataFrame de Feedbacks:")
print(feedbacks)
print("\nDataFrame de Feedback Contínuo:")
print(feedback_continuo)

# Função para recomendar músicas que o usuário ainda não ouviu, respeitando o gênero preferido
def recomendar_musicas(user_id):
    # Identificar os gêneros preferidos pelos feedbacks positivos
    user_feedback = feedbacks[feedbacks['user_id'] == user_id]['comentario']
    genero_preferido = None

    for feedback in user_feedback:
        if 'Adoro Sertanejo' in feedback:
            genero_preferido = generos[generos['nome'] == 'Sertanejo']['genero_id'].iloc[0]
            break

    # Identificar as músicas já ouvidas pelo usuário
    musicas_ouvidas = historico[historico['user_id'] == user_id]['song_id'].tolist()

    # Filtrar músicas ainda não ouvidas, priorizando o gênero preferido se houver
    if genero_preferido is not None:
        recomendacoes = musicas[
            (~musicas['song_id'].isin(musicas_ouvidas)) &
            (musicas['genero_id'] == genero_preferido)
        ]
    else:
        recomendacoes = musicas[~musicas['song_id'].isin(musicas_ouvidas)]

    return recomendacoes.merge(generos, on='genero_id')

# Exemplo de recomendação para um usuário específico (user_id = 3)
user_id = 3
recomendacoes = recomendar_musicas(user_id)
print(f"\nRecomendações para o Usuário {user_id}:")
print(recomendacoes)

"""# BackEnd com Flask e FrontEnd"""

pip install flask pandas

!pip install flask-ngrok

from flask import Flask, render_template_string
from flask_ngrok import run_with_ngrok
import pandas as pd

app = Flask(__name__)
run_with_ngrok(app)  # Integração do ngrok com o Flask

# Carregar os dados dos arquivos CSV
usuarios = pd.read_csv('/content/usuarios.csv')
musicas = pd.read_csv('/content/musicas.csv')
generos = pd.read_csv('/content/generos.csv')
historico = pd.read_csv('/content/historico_de_escuta.csv')
feedbacks = pd.read_csv('/content/feedback.csv')
feedback_continuo = pd.read_csv('/content/feedback_continuo.csv')

# Função para recomendar músicas que o usuário ainda não ouviu, respeitando o gênero preferido
def recomendar_musicas(user_id):
    # Identificar os gêneros preferidos pelos feedbacks positivos
    user_feedback = feedbacks[feedbacks['user_id'] == user_id]['comentario']
    genero_preferido = None

    for feedback in user_feedback:
        if 'Adoro Pop' in feedback:
            genero_preferido = generos[generos['nome'] == 'Pop']['genero_id'].iloc[0]
            break

    # Identificar as músicas já ouvidas pelo usuário
    musicas_ouvidas = historico[historico['user_id'] == user_id]['song_id'].tolist()

    # Filtrar músicas ainda não ouvidas, priorizando o gênero preferido se houver
    if genero_preferido is not None:
        recomendacoes = musicas[
            (~musicas['song_id'].isin(musicas_ouvidas)) &
            (musicas['genero_id'] == genero_preferido)
        ]
    else:
        recomendacoes = musicas[~musicas['song_id'].isin(musicas_ouvidas)]

    return recomendacoes.merge(generos, on='genero_id')

# Rota para exibir as recomendações para um usuário específico
@app.route('/')
def index():
    user_id = 3  # Exemplo de usuário específico (você pode alterar conforme necessário)
    recomendacoes = recomendar_musicas(user_id)

    # Template HTML (usando string diretamente no Python)
    template_html = """
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Recomendações do RALAA para o Usuário {{ user_id }}</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                background-color: #f4f4f4;
            }
            .container {
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
                background-color: #fff;
                border: 1px solid #ddd;
                border-radius: 5px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
            h1 {
                color: #333;
                text-align: center;
            }
            table {
                width: 100%;
                border-collapse: collapse;
                margin-top: 20px;
            }
            th, td {
                padding: 8px;
                text-align: left;
                border-bottom: 1px solid #ddd;
            }
            th {
                background-color: #f2f2f2;
                color: #333;
            }
            tbody tr:hover {
                background-color: #f9f9f9;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>Recomendações do RALAA para o Usuário {{ user_id }}</h1>
            <table>
                <thead>
                    <tr>
                        <th>Título</th>
                        <th>Artista</th>
                        <th>Álbum</th>
                        <th>Gênero</th>
                        <th>Data de Lançamento</th>
                    </tr>
                </thead>
                <tbody>
                    {% for musica in recomendacoes %}
                    <tr>
                        <td>{{ musica['titulo'] }}</td>
                        <td>{{ musica['artista'] }}</td>
                        <td>{{ musica['album'] }}</td>
                        <td>{{ musica['nome'] }}</td>
                        <td>{{ musica['data_de_lancamento'] }}</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </body>
    </html>
    """

    rendered_html = render_template_string(template_html, user_id=user_id, recomendacoes=recomendacoes.to_dict(orient='records'))
    return rendered_html

if __name__ == '__main__':
    app.run()

!pkill -f ngrok